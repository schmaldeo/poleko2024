@using PolekoWebApp.Data
@using System.Text.RegularExpressions
@inject IDialogService DialogService
@inject ILogger<DeviceSettingsDialog> Logger

<MudDialogProvider/>
<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Settings" Class="mr-3 mb-n1"/>
            Ustawienia
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudItem>
            <MudNumericField T="int" @bind-Value="_sensorCopy.FetchInterval" Min="0" Label="Częstotliwość odczytów (sekundy)"/>
        </MudItem>
        <MudItem>
            <MudTextField @bind-Value="_sensorCopy.IpAddress" @ref="_ipField" Validation="IpAddressValidation"
                          Disabled="_sensorCopy.UsesDhcp" Label="Adres IP"/>
        </MudItem>
        <MudItem Class="d-flex flex-row align-center mt-2">
            <MudCheckBox Color="Color.Primary" @bind-Value="_sensorCopy.UsesDhcp" Style="margin-left: -1rem;"/>
            DHCP
        </MudItem>
        <MudItem Class="d-flex flex-row align-center mb-2">
            <MudCheckBox Color="Color.Primary" @bind-Value="_sensorCopy.ManuallyStartFetch" Style="margin-left: -1rem;"/>
            Manualne monitorowanie
        </MudItem>
        <MudItem>
            <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="Delete">Usuń urządzenie</MudButton>
        </MudItem>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Anuluj</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Zapisz</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public Sensor Sensor { get; set; } = null!;
    private Sensor _sensorCopy = null!;
    private MudTextField<string> _ipField;

    private async Task Submit()
    {
        await _ipField.Validate();
        // skip IP field validation if DHCP is used
        if (!_sensorCopy.UsesDhcp)
        {
            if (!_ipField.HasErrors)
            {
                MudDialog.Close(DialogResult.Ok(_sensorCopy));
            }
        }
        else
        {
            MudDialog.Close(DialogResult.Ok(_sensorCopy));
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task Delete()
    {
        var dialog = await DialogService.ShowAsync<AreYouSureDialog>();
        var result = await dialog.Result;

        if (!result.Canceled) MudDialog.Close(DialogResult.Ok(false));
    }

    private IEnumerable<string> IpAddressValidation(string ip)
    {
        if (!Regex.IsMatch(ip, @"^((25[0-5]|(2[0-4]|1\d|[1-9]|)\d)\.?\b){4}$"))
            yield return "Nieprawidłowy adres IP";
    }

    protected override void OnInitialized()
    {
        _sensorCopy = new Sensor
        {
            FetchInterval = Sensor.FetchInterval,
            IpAddress = Sensor.IpAddress,
            MacAddress = Sensor.MacAddress,
            ManuallyStartFetch = Sensor.ManuallyStartFetch,
            SensorId = Sensor.SensorId,
            UsesDhcp = Sensor.UsesDhcp
        };
        base.OnInitialized();
    }

}