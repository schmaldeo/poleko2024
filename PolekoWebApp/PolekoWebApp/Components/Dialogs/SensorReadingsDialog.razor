@rendermode InteractiveServer
@using System.IO;
@using PolekoWebApp.Data
@using PolekoWebApp.Components.Services
@using Plotly.Blazor
@using Plotly.Blazor.Traces
@using System.Globalization
@using Plotly.Blazor.Traces.ScatterLib
@using CsvHelper
@using CsvHelper.Configuration
@using System.ComponentModel
@using System.Text
@using CsvHelper.TypeConversion
@inject SensorService SensorService
@inject IJSRuntime JS

<MudDialog Style="min-width: 70vw">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.TableChart" Class="mr-3 mb-n1"/>
            Odczyty
        </MudText>
    </TitleContent>
    <DialogContent>
        @if (_fetched)
        {
            <MudTabs Elevation="4" Color="Color.Dark" Centered="true">
                <MudTabPanel Text="Tabela">
                    <MudDataGrid Items="_dataToDisplay" Dense="true" Virtualize="true" Height="60vh">
                        <Columns>
                            <TemplateColumn Title="Data" HeaderStyle="width: 25rem">
                                <CellTemplate>
                                    @DateTimeOffset.FromUnixTimeSeconds(context.Item.Epoch).DateTime.ToString(CultureInfo.CurrentCulture)
                                </CellTemplate>
                            </TemplateColumn>
                            <TemplateColumn Title="Temperatura">
                                <CellTemplate>
                                    @context.Item.Temperature°C
                                </CellTemplate>
                            </TemplateColumn>
                            <TemplateColumn Title="Wilgotność">
                                <CellTemplate>
                                    @context.Item.Humidity%
                                </CellTemplate>
                            </TemplateColumn>
                        </Columns>
                    </MudDataGrid>
                    <MudButton OnClick="SaveCsv" Variant="Variant.Outlined" Style="width: 100%">Pobierz .csv</MudButton>
                </MudTabPanel>
                <MudTabPanel Text="Wykres">
                    <PlotlyChart @bind-Config="_config" @bind-Layout="_layout" @bind-Data="_chartData" @ref="_chart"/>
                </MudTabPanel>
            </MudTabs>
        }
        <MudItem Style="display: flex; width: 100%;" Class="mt-4">
            <MudText Typo="Typo.h5" Style="margin: auto">Wybierz daty</MudText>
        </MudItem>
        <MudItem Class="d-flex flex-row mt-4">
            <MudItem Class="ml-auto mr-4">
                <MudText Typo="Typo.body1">
                    Od:
                </MudText>
                <MudTextField T="string" Format="yyyy-MM-ddTHH:mm:ss" InputType="InputType.DateTimeLocal" @bind-Value="BeginDate"/>
            </MudItem>
            <MudItem Class="mr-auto ml-4">
                <MudText Typo="Typo.body1">
                    Do:
                </MudText>
                <MudTextField T="string" Format="yyyy-MM-ddTHH:mm:ss" InputType="InputType.DateTimeLocal" @bind-Value="EndDate"/>
            </MudItem>
        </MudItem>
        <MudItem Style="display: flex; width: 100%;">
            <MudButton Variant="Variant.Filled" OnClick="GetDataFromSensor" class="mx-auto mt-3">Pobierz dane z bazy</MudButton>
        </MudItem>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Close">Zamknij</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public Sensor Sensor { get; set; } = null!;

    private bool _fetched;
    
    // need to set the type of these to String and then parse to DateTime because the input doesn't want to work
    // properly with DateTime directly
    private string? BeginDate { get; set; }
    private string? EndDate { get; set; }
    private PlotlyChart _chart;
    private Config _config = new() {Responsive = true};
    private Layout _layout = new();
    private IList<ITrace> _chartData = [];

    private SensorData[]? _dataToDisplay;

    private async Task SaveCsv()
    {
        var stream = GetStream();
        var fileName = "dane.csv";

        using var streamRef = new DotNetStreamReference(stream: stream);

        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
        await stream.DisposeAsync();
    }

    private System.IO.Stream GetStream()
    {
        var memoryStream = new MemoryStream();
        using var writer = new StreamWriter(memoryStream, encoding: Encoding.UTF8, leaveOpen: true);
        using var csv = new CsvWriter(writer, CultureInfo.InvariantCulture);
        csv.Context.RegisterClassMap<CsvMap>();
        csv.WriteRecords(_dataToDisplay);
        writer.Flush();
        memoryStream.Position = 0;
        return memoryStream;
    }

    private async Task GetDataFromSensor()
    {
        if (BeginDate is not null && EndDate is not null)
        {
            var beginDateTime = DateTime.Parse(BeginDate);
            var endDateTime = DateTime.Parse(EndDate);
            _dataToDisplay = await SensorService.GetReadingsFromDb(Sensor, beginDateTime, endDateTime);
            var wasChartFilled = false;
            if (_chartData.Count > 0)
            {
                _chartData.Clear();
                wasChartFilled = true;
            }
            _chartData.Add(new Scatter
            {
                Name = "Temperatura",
                Mode = ModeFlag.Markers,
                Y = _dataToDisplay.Select(x => (object)x.Temperature).ToList(),
                X = _dataToDisplay.Select(x => (object)DateTimeOffset.FromUnixTimeSeconds(x.Epoch).DateTime
                .ToString(CultureInfo.CurrentCulture)).ToArray()
            });
            _chartData.Add(new Scatter
            {
                Name = "Wilgotność",
                Mode = ModeFlag.Markers,
                Y = _dataToDisplay.Select(x => (object)x.Humidity).ToList(),
                X = _dataToDisplay.Select(x => (object)DateTimeOffset.FromUnixTimeSeconds(x.Epoch).DateTime
                    .ToString(CultureInfo.CurrentCulture)).ToArray()
            });
            if (wasChartFilled)
            {
                await _chart.React();
            }
            _fetched = true;
        }
    }

    void Close() => MudDialog.Close(DialogResult.Cancel());

    private sealed class CsvMap : ClassMap<SensorData>
    {
        public CsvMap()
        {
            Map(m => m.Epoch).Index(0).Name("Data").TypeConverter<EpochToStringConverter>();
            Map(m => m.Temperature).Index(1).Name("Temperatura");
            Map(m => m.Humidity).Index(1).Name("Wilgotność");
        }
    }
    
    public class EpochToStringConverter : ITypeConverter
    {
        public object ConvertFromString(string text, IReaderRow row, MemberMapData memberMapData)
        {
            return DateTime.TryParse(text, out var dateTime) ? new DateTimeOffset(dateTime).ToUnixTimeSeconds() : 0;
        }

        public string ConvertToString(object value, IWriterRow row, MemberMapData memberMapData)
        {
            if (value is long epoch)
            {
                return DateTimeOffset.FromUnixTimeSeconds(epoch).DateTime.ToString(CultureInfo.CurrentCulture);
            }

            return "";
        }
    }
}