@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using PolekoWebApp.Data
@using MudBlazor

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Register> Logger
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>

@* TODO fix overflow *@
<MudGrid>
    <MudItem sm="5" Class="ma-auto">
        <MudPaper Class="pa-4">
            <StatusMessage Message="@Message"/>
            <EditForm Model="@Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
                <DataAnnotationsValidator/>
                <h2>Stwórz nowe konto</h2>
                <hr/>
                <ValidationSummary class="text-danger" role="alert"/>
                <div class="mud-input-control mud-input-required mud-input-input-control pb-2">
                    <div class="mud-input-control-input-container">
                        <div class="mud-input mud-input-text mud-input-underline">
                            <InputText @bind-Value="Input.Email" class="mud-input-slot mud-input-root mud-input-root-text" autocomplete="username" aria-required="true" placeholder="Email"/>
                            <ValidationMessage For="() => Input.Email" class="text-danger"/>
                        </div>
                    </div>
                </div>
                <div class="mud-input-control mud-input-required mud-input-input-control pb-2">
                    <div class="mud-input-control-input-container">
                        <div class="mud-input mud-input-text mud-input-underline">
                            <InputText type="password" @bind-Value="Input.Password" class="mud-input-slot mud-input-root mud-input-root-text" autocomplete="new-password" aria-required="true" placeholder="Hasło"/>
                            <ValidationMessage For="() => Input.Password" class="text-danger"/> 
                        </div>
                    </div>
                </div>
                <div class="mud-input-control mud-input-required mud-input-input-control pb-2">
                    <div class="mud-input-control-input-container">
                        <div class="mud-input mud-input-text mud-input-underline">
                            <InputText type="password" @bind-Value="Input.ConfirmPassword" class="mud-input-slot mud-input-root mud-input-root-text" autocomplete="new-password" aria-required="true" placeholder="Potwierdź hasło"/>
                            <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger"/>
                        </div>
                    </div>
                </div>
                <div class="d-flex">
                    <MudLink Href="Account/Login" Class="align-self-end">Masz już konto? Zaloguj się</MudLink>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mt-2 ml-auto">Zarejestruj</MudButton>
                </div>
            </EditForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var first = !await UserManager.Users.AnyAsync();
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        // automatically confirm email for every user
        var token = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        await UserManager.ConfirmEmailAsync(user, token);
        await UserManager.SetLockoutEnabledAsync(user, false);

        // give the first registered user an admin role
        if (first)
        {
            await UserManager.AddToRolesAsync(user, ["SuperAdmin", "Admin", "User"]);
            Logger.LogInformation("First account created. Admin role given.");
        }
        else
        {
            await UserManager.AddToRoleAsync(user, "User");
        }

        Logger.LogInformation("User created a new account with password.");

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                                                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }

        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }

}