@page "/Account/Login"
@using Microsoft.AspNetCore.Authentication
@using PolekoWebApp.Data
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Logowanie</PageTitle>

<MudItem sm="5" Class="ma-auto">
    <MudPaper Class="pa-4">
        <StatusMessage Message="@errorMessage"/>
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator/>
            <h2>Zaloguj się</h2>
            <hr/>
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mud-input-control mud-input-required mud-input-input-control pb-2">
                <div class="mud-input-control-input-container">
                    <div class="mud-input mud-input-text mud-input-underline">
                        <InputText @bind-Value="Input.Email" class="mud-input-slot mud-input-root mud-input-root-text" autocomplete="username" aria-required="true" placeholder="Email"/>
                        <ValidationMessage For="() => Input.Email" class="text-danger"/>
                    </div>
                </div>
            </div>
            <div class="mud-input-control mud-input-required mud-input-input-control pb-2">
                <div class="mud-input-control-input-container">
                    <div class="mud-input mud-input-text mud-input-underline">
                        <InputText type="password" @bind-Value="Input.Password" class="mud-input-slot mud-input-root mud-input-root-text" autocomplete="current-password" aria-required="true" placeholder="Hasło"/>
                        <ValidationMessage For="() => Input.Password" class="text-danger"/>
                    </div>
                </div>
            </div>
            <div class="d-flex mb-3 mt-2">
                <label class="align-self-center">
                    <InputCheckbox @bind-Value="Input.RememberMe"/>
                    <span style="font-size: 1rem;">Zapamiętaj mnie</span>
                </label>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Zaloguj</MudButton>
            </div>
            <MudLink Href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Zarejestruj się</MudLink>
        </EditForm>
    </MudPaper>
</MudItem>

@code {
    private string? errorMessage;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required] [EmailAddress] public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")] public bool RememberMe { get; set; }
    }

}