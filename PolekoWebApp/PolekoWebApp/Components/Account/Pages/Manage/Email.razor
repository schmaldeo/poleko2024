@rendermode InteractiveServer
@page "/Account/Manage/Email"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using PolekoWebApp.Data

@inject UserManager<ApplicationUser> UserManager
@inject IdentityUserAccessor UserAccessor
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager
@inject ILogger<Email> Logger

<PageTitle>Zmień email</PageTitle>

<MudText Typo="Typo.h5" style="text-align: center">Zmień email</MudText>

<StatusMessage Message="@message"/>
<EditForm Model="Input" FormName="change-email" OnValidSubmit="OnValidSubmitAsync" method="post">
    <DataAnnotationsValidator/>
    <ValidationSummary class="text-danger" role="alert"/>
    <div class="mud-input-control mud-input-required mud-input-input-control pb-2">
        <div class="mud-input-control-input-container">
            <div class="mud-input mud-input-text mud-input-underline">
                <InputText @bind-Value="Input.NewEmail" class="mud-input-slot mud-input-root mud-input-root-text" autocomplete="current-password" aria-required="true" placeholder="Hasło"/>
                <ValidationMessage For="() => Input.NewEmail" class="text-danger"/>
            </div>
        </div>
    </div>
    <ValidationMessage For="() => Input.NewEmail" class="text-danger"/>
    <br/>
    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Zmień email</MudButton>
</EditForm>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private string? email;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "change-email")]
    private InputModel Input { get; set; } = new();
    
    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        email = await UserManager.GetEmailAsync(user);

        Input.NewEmail ??= email;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.NewEmail is null || Input.NewEmail == email)
        {
            message = "Nowy email jest taki sam jak stary.";
            return;
        }

        var token = await UserManager.GenerateChangeEmailTokenAsync(user, Input.NewEmail);

        var changeEmail = await UserManager.ChangeEmailAsync(user, Input.NewEmail, token);
        var setUsername = await UserManager.SetUserNameAsync(user, Input.NewEmail);
        if (!changeEmail.Succeeded || !setUsername.Succeeded)
        {
            message = "Nie można zmienić emaila.";
            Logger.LogError("Couldn't change email.");
        }
        await SignInManager.RefreshSignInAsync(user);
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Nowy email")]
        public string? NewEmail { get; set; }
    }

}