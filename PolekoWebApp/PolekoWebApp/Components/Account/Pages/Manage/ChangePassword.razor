@page "/Account/Manage/ChangePassword"
@using PolekoWebApp.Data
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger

<PageTitle>Zmień hasło</PageTitle>

<MudText Typo="Typo.h5" style="text-align: center">Zmień hasło</MudText>

<StatusMessage Message="@message"/>
<EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
    <DataAnnotationsValidator/>
    <ValidationSummary class="text-danger" role="alert"/>
    <div class="mud-input-control mud-input-required mud-input-input-control pb-2">
        <div class="mud-input-control-input-container">
            <div class="mud-input mud-input-text mud-input-underline">
                <InputText type="password" @bind-Value="Input.OldPassword" class="mud-input-slot mud-input-root mud-input-root-text" aria-required="true" placeholder="Stare hasło"/>
                <ValidationMessage For="() => Input.OldPassword" class="text-danger"/>
            </div>
        </div>
    </div>
    <div class="mud-input-control mud-input-required mud-input-input-control pb-2">
        <div class="mud-input-control-input-container">
            <div class="mud-input mud-input-text mud-input-underline">
                <InputText type="password" @bind-Value="Input.NewPassword" class="mud-input-slot mud-input-root mud-input-root-text" aria-required="true" placeholder="Nowe hasło"/>
                <ValidationMessage For="() => Input.NewPassword" class="text-danger"/>
            </div>
        </div>
    </div>
    <div class="mud-input-control mud-input-required mud-input-input-control pb-2">
        <div class="mud-input-control-input-container">
            <div class="mud-input mud-input-text mud-input-underline">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="mud-input-slot mud-input-root mud-input-root-text" aria-required="true" placeholder="Powtórz nowe hasło"/>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger"/>
            </div>
        </div>
    </div>
    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Zmień hasło</MudButton>
</EditForm>


@code {
    private string? message;
    private ApplicationUser user = default!;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
    }

    private async Task OnValidSubmitAsync()
    {
        var changePasswordResult = await UserManager.ChangePasswordAsync(user, Input.OldPassword, Input.NewPassword);
        if (!changePasswordResult.Succeeded)
        {
            message = $"Error: {string.Join(",", changePasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        Logger.LogInformation("User changed their password successfully.");

        RedirectManager.RedirectToCurrentPageWithStatus("Zmieniono hasło.", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Obecne hasło")]
        public string OldPassword { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "Hasło musi zawierać co najmniej {2} i co najwyżej {1} znaków.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Nowe hasło")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Powtórz hasło")]
        [Compare("NewPassword", ErrorMessage = "Hasła się nie zgadzają.")]
        public string ConfirmPassword { get; set; } = "";
    }

}