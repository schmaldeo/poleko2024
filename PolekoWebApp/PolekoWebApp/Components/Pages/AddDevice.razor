@rendermode InteractiveServer
@page "/Device/Add"
@layout MainLayout
@attribute [Authorize(Roles="SuperAdmin, Admin")]

@using System.Net.Sockets
@using System.Text
@using System.Text.Json;
@using System.Text.RegularExpressions
@using Microsoft.EntityFrameworkCore
@using PolekoWebApp.Components.Layout
@using PolekoWebApp.Data;
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject NavigationManager NavigationManager

@* TODO fix the socket issue *@
<PageTitle>Dodaj nowe czujniki</PageTitle>

<MudItem sm="5" Class="ma-auto">
    <MudPaper Class="pa-4">
        <h3>Dodaj czujnik</h3>
        <MudForm @ref="_form" Class="d-flex flex-column">
            <MudTextField T="string" Label="Adres IP" @bind-Value="IpAddress"
                          Validation="@(new Func<string, IEnumerable<string>>(IpAddressValidation))"/>
            <MudTextField T="string" Label="Adres MAC" @bind-Value="MacAddress"
                          Validation="@(new Func<string, IEnumerable<string>>(MacAddressValidation))" Class="mb-4"/>

            @if (!_listeningStopped)
            {
                <span class="align-self-center d-flex align-center">
                    <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true" Class="mr-2"/>
                    Wyszukiwanie czujników w sieci...
                </span>
            }
            @if (Sensors.Count > 0)
            {
                <MudDataGrid Items="Sensors" T="Sensor" RowClick="OnRowClick" RowStyle="cursor: pointer;" Class="ma-3" Elevation="3" Dense="true">
                    <Columns>
                        <PropertyColumn Property="x => x.IpAddress" Title="IP" role="button"/>
                        <PropertyColumn Property="x => x.MacAddress" Title="MAC" role="button"/>
                    </Columns>
                </MudDataGrid>
                <span style="color: darkgrey; font-size: 0.8rem" class="ml-3">(kliknij w wiersz żeby wpisać parametry wybranego czujnika)</span>
            }
            @if (_listeningStopped && Sensors.Count == 0)
            {
                <span class="align-self-center">Nie znaleziono żadnych czujników w sieci</span>
            }
            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit" Class="mt-4">
                Dodaj
            </MudButton>
        </MudForm>
    </MudPaper>
</MudItem>

@code {
    public string IpAddress { get; set; }
    public string MacAddress { get; set; }
    private List<Sensor> Sensors { get; set; } = [];
    
    private bool _listeningStopped;
    private MudForm _form;

    private async Task Submit()
    {
        if (_form.IsValid)
        {
            Sensor sensor;
            // if the form is submitted without IP address, only with MAC
            if (IpAddress == string.Empty)
            {
                // find the sensor with this MAC among the sensors found in the network
                sensor = Sensors.First(x => x.MacAddress == MacAddress.Trim());
            }
            else
            {
                sensor = Sensors.First(x => x.IpAddress == IpAddress.Trim());
            }

            await using var dbContext = await DbContextFactory.CreateDbContextAsync();
            var sensorInDb = await dbContext.Sensors.FirstOrDefaultAsync(x => x.IpAddress == sensor.IpAddress);
            if (sensorInDb is not null)
            {
                var sensorId = sensorInDb.SensorId;
                NavigationManager.NavigateTo($"Device/{sensorId}");
            }
            else
            {
                dbContext.Sensors.Add(sensor);
                await dbContext.SaveChangesAsync();
                NavigationManager.NavigateTo($"Device/{sensor.SensorId}", true);
            }
        }
    }

    private async Task ListenForDevices()
    {
        var udpClient = new UdpClient(5506);
        var cancellationTokenSource = new CancellationTokenSource();
        cancellationTokenSource.CancelAfter(TimeSpan.FromSeconds(5));
        try
        {
            while (!cancellationTokenSource.Token.IsCancellationRequested)
            {
                var result = await udpClient.ReceiveAsync(cancellationTokenSource.Token);
                var resultStr = Encoding.UTF8.GetString(result.Buffer);
                var device = JsonSerializer.Deserialize<Sensor>(resultStr)!;
                if (!Sensors.Contains(device))
                {
                    Sensors.Add(device);
                }
                StateHasChanged();
            }
        }
        catch (OperationCanceledException)
        {
            _listeningStopped = true;
        }
        finally
        {
            udpClient.Close();
            _listeningStopped = true;
            StateHasChanged();
        }
    }

    private void OnRowClick(DataGridRowClickEventArgs<Sensor> args)
    {
        IpAddress = args.Item.IpAddress!;
        MacAddress = args.Item.MacAddress!;
    }
    
    private IEnumerable<string> IpAddressValidation(string ip)
    {
        // accept empty field because we want to allow the form to be submitted with only one field filled out
        if (string.IsNullOrWhiteSpace(ip))
        {
            yield break;
        }
        if (!Regex.IsMatch(ip, @"^((25[0-5]|(2[0-4]|1\d|[1-9]|)\d)\.?\b){4}$"))
            yield return "Nieprawidłowy adres IP";
    }
    
    private IEnumerable<string> MacAddressValidation(string mac)
    {
        // same case as in IpAddressValidation
        if (string.IsNullOrWhiteSpace(mac))
        {
            yield break;
        }
        if (!Regex.IsMatch(mac, "^([0-9A-Fa-f]{2}[:]){5}([0-9A-Fa-f]{2})$"))
            yield return "Nieprawidłowy adres MAC";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ListenForDevices();
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}